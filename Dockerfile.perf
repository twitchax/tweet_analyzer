FROM node:14 as client
WORKDIR /build

RUN npm -g config set user root
RUN npm install -g bower
RUN npm install -g polymer-cli

COPY ./client/package.json ./client/package-lock.json ./
RUN npm install

COPY ./client/tsconfig.json ./client/index.html ./
COPY ./client/src ./src

RUN npm run build

FROM rustlang/rust:nightly AS server
WORKDIR /build

# Download the target for static linking.
RUN rustup target add x86_64-unknown-linux-gnu

RUN USER=root cargo new tweet_analyzer_server
WORKDIR /build/tweet_analyzer_server

COPY ./server/Cargo.toml ./server/Cargo.lock ./
RUN cargo build --release

# Copy the source and build the application.
COPY ./server/src ./src
RUN cargo build --release --target x86_64-unknown-linux-gnu

# Copy the statically-linked binary into a scratch container.
FROM ubuntu
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y libssl-dev ca-certificates \
    linux-tools-common linux-tools-generic curl autoconf automake \
    bzip2 dpkg-dev file g++ gcc imagemagick libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgdbm-dev \
    libglib2.0-dev libgmp-dev libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmaxminddb-dev libncurses5-dev \
    libncursesw5-dev libpng-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt-dev \
    libyaml-dev make patch unzip xz-utils zlib1g-dev && rm -rf /var/lib/apt/lists/*

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rs.sh
RUN chmod a+x rs.sh
RUN ./rs.sh -y
RUN $HOME/.cargo/bin/rustup update
RUN $HOME/.cargo/bin/cargo install flamegraph

COPY --from=server /build/tweet_analyzer_server/target/x86_64-unknown-linux-gnu/release/tweet_analyzer_server .
COPY --from=client /build/build/default ./static
COPY entrypoint.sh .
RUN chmod a+x entrypoint.sh

ENTRYPOINT [ "/entrypoint.sh" ]